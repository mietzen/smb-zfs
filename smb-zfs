#!/bin/bash

# smb-zfs - ZFS Samba Management Tool
# Source: https://github.com/mietzen/smb-zfs
# MIT License

set -e

VERSION="0.1.0"
SCRIPT_NAME="smb-zfs"
STATE_FILE="/etc/smb-zfs.state"
SMB_CONF="/etc/samba/smb.conf"
AVAHI_SMB_SERVICE="/etc/avahi/services/smb.service"

# Source lib
for file in ./lib/*.sh; do
    source "$file"
done

# Show usage
show_usage() {
    cat << EOF
Usage: $SCRIPT_NAME COMMAND [OPTIONS]

Commands:
  install <POOL> [--macos]           Setup Samba with Avahi and ZFS integration
  create user <USER> [--shell]       Create Linux and SMB user with ZFS home
  create share <SHARE>               Create ZFS dataset and Samba share
  create group <GROUP> [--desc <DESC>] <USER1> <USER2> ...
                                     Create new user group with optional description and users
  modify share <SHARE>               Modify existing share configuration
  modify group <GROUP>               Modify existing group membership
  modify setup                       Modify server configuration
  list users                         List users created by this tool
  list shares                        List shares created by this tool
  list groups                        List groups created by this tool
  delete user <USER>                 Remove user and cleanup
  delete share <SHARE>               Remove share and cleanup
  delete group <GROUP>               Remove group and cleanup
  uninstall                          Remove all configuration and cleanup

Options:
  -h, --help                        Show this help message
  -v, --version                     Show the version of $SCRIPT_NAME

Examples:
  $SCRIPT_NAME install tank --macos
  $SCRIPT_NAME create user john --shell
  $SCRIPT_NAME create share projects
  $SCRIPT_NAME create group admins --desc "System Administrators" admin1 admin2
  $SCRIPT_NAME create group marketing
  $SCRIPT_NAME list users
  $SCRIPT_NAME delete user john

State file: $STATE_FILE
EOF
}

# Main command dispatcher
main() {
    # Initialize state file
    init_state

    # Parse command line arguments
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 0
    fi

    local command="$1"
    shift

    case "$command" in
        "install")
            check_root
            cmd_install "$@"
            ;;
        "create")
            check_root
            local subcommand="$1"
            shift
            case "$subcommand" in
                "user")
                    cmd_create_user "$@"
                    ;;
                "share")
                    cmd_create_share "$@"
                    ;;
                "group")
                    cmd_create_group "$@"
                    ;;
                *)
                    print_error "Unknown create subcommand: $subcommand"
                    show_usage
                    exit 1
                    ;;
            esac
            ;;
        "modify")
            check_root
            local subcommand="$1"
            shift
            case "$subcommand" in
                "share")
                    cmd_modify_share "$@"
                    ;;
                "group")
                    cmd_modify_group "$@"
                    ;;
                "setup")
                    cmd_modify_setup "$@"
                    ;;
                *)
                    print_error "Unknown modify subcommand: $subcommand"
                    show_usage
                    exit 1
                    ;;
            esac
            ;;
        "list")
            local subcommand="$1"
            shift
            case "$subcommand" in
                "users")
                    cmd_list_users "$@"
                    ;;
                "shares")
                    cmd_list_shares "$@"
                    ;;
                "groups")
                    cmd_list_groups "$@"
                    ;;
                *)
                    print_error "Unknown list subcommand: $subcommand"
                    show_usage
                    exit 1
                    ;;
            esac
            ;;
        "delete")
            check_root
            local subcommand="$1"
            shift
            case "$subcommand" in
                "user")
                    cmd_delete_user "$@"
                    ;;
                "share")
                    cmd_delete_share "$@"
                    ;;
                "group")
                    cmd_delete_group "$@"
                    ;;
                *)
                    print_error "Unknown delete subcommand: $subcommand"
                    show_usage
                    exit 1
                    ;;
            esac
            ;;
        "passwd")
            cmd_passwd "$@"
            ;;
        "uninstall")
            check_root
            cmd_uninstall "$@"
            ;;
        "-v"|"--version")
            echo "${VERSION}"
            exit 0
            ;;
        "-h"|"--help")
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
